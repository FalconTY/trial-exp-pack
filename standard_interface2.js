// new goal: create an interface where the materials are stored in a separate js doc so here it is just retrieved
// material pool is determined  in a separate file, here is a testing version; below the test_materials is an array of all the trials.
// this should now suffice for most picture, reading and judgment uses
// currently, it goes to block-trial-stimuli: three layers; you need to compile all stimuli in each trial and put them tegether to form a block
//until May 3rd, 2018, the current interface is workable, and can hold any trials containing any texts or image materials as long as specified in the block_materials variable (should be retrieved through another file; all you need to set now is to create a raw material package following the block_materials format
// if further you need to do aud as well, just change the stmpresentation section accordingly(with more parameters that should be specified by aud file event; all the framework is set(path of audio file is the same as img files); however, somehow the aud file failed to be loaded there; it seems that the aud file needs to be specified separately-->reply from github developer: they fail to detect audio in preload, therefore it's really their problem.
// if need to be changed to button click , change in the stmpresentation section accordingly

var block_materials=[];
block_materials["blockname"]="practice";
block_materials.push({   // this defines a trial to be pushed to the materials; this should be in a separate file;  be aware of this way of adding properties: use commas not semi colons;
itemlist:["Look",'img/blue.png',"and","that's a",'img/orange.png',"wonderful!!"],
itemidlist:["text1","text2",'testimg1',"text3","text4","testingaud1","text5"],
cresponselist:["f","f","anything","f","f","anything","f"],
trialcrR:"Yes or No"
});
// the above is a demonstration of a block raw materials; it should go to another file



//transition function: getting materials from the other file
function getmaterials(materials){
	this.itemlist=materials.itemlist;
	this.itemidlist=materials.itemidlist;
	this.cresponselist=materials.cresponselist;	
	this.trialcrR=materials.trialcrR;
};

// get all materials for a block; more blocks are used if in need;
var  exp_pool=[];     // all materials for a block
for (i=0;i<block_materials.length;i++)
{exp_pool.push(new getmaterials(block_materials[0])); 
exp_pool["blockname"]=block_materials["blockname"];
}   //test matrials are specified in the materil


    /* create timeline */
var timeline = [];
var results=[];
var ResText=""; 
var itemorder=1;
var trialorder=1;
var wlcm="Welcome to the experiment";

// var wordlist1=arrangepool(exp_pool[0]);
	
// building blocks
 function buildblock(exppool)	
{
	this.sequence=[];
	var y=exppool["blockname"];
	for(i=0;i<exppool.length;i++)
	{  var x=exppool[i].trialcrR;   // for some reasons unknown, have to get this x in this way, cannot insert expool[i].trialcrR directly in to the temp
		var wordlist =arrangepool(exppool[i]);
		this.sequence.push(new completetrial(wordlist, y, x)); // get the pool for a single trial; this can be a sentence
	}
};
	
var practiceblock=new buildblock(exp_pool);
var sentence1=practiceblock.sequence[0];
 
 
function trialresult(){
	this.name="Stimulus,";
	this.time="RT,";
	this.response="Response,";
	this.c_response="CrtRp,"
	this.block="Block Name,"
	this.trial="Trial Number,"
	this.order="Item Order<br>";
}


function stm(item,item_id,c_response){ //creat stimuli information for exp 
	this.item=item;
	this.item_id=item_id;
	if(item.indexOf('img')>=0||item.indexOf('aud')>=0)
	{	this.style=this.item;} 	else 	{this.style='<div style="font-size:60px;">'+this.item+'</div>';}; 
    this.cresp=c_response;
}

function arrangepool(material)   // create array of different stimuli
{
	var stmlist=[];
	for (i=0;i<material.itemlist.length;i++)
	{
		stmlist.push(new stm(material.itemlist[i],material.itemidlist[i],material.cresponselist[i]));
	};
	return stmlist; 
}

	
function completetrial(stmlist,blockid,trialcrR){  //stmlist: list of stimuli generated by arrangepool();  trialcrR is the trial correct response for the final judgment section, now defined in a block;
// function sentence(){

	itemorder=1;
	this.segments=[];
	this.sl=[];
	var last_type='';
	
	for (i=0;i<stmlist.length;i++)
	{ 	var current_type='';
		if(stmlist[i].item.indexOf('img')>=0){current_type='img'}
		else if(stmlist[i].item.indexOf('aud')>=0){current_type='aud'}
		else{current_type='text'};

		if(i==0)
		{	this.sl.push({stimulus: stmlist[i].style,  data: { correct_response:stmlist[i].cresp, item_id:stmlist[i].item_id, block_id:blockid}});
			this.sl.type=current_type;
			this.segments.push(this.sl);
			last_type=current_type;
		}

else if (current_type==last_type)
{	this.sl.push({stimulus: stmlist[i].style,  data: { correct_response:stmlist[i].cresp, item_id:stmlist[i].item_id, block_id:blockid}});
	this.segments[this.segments.length-1]=this.sl;
}
else{
	this.sl=[];
	this.sl.push({stimulus: stmlist[i].style,  data: { correct_response:stmlist[i].cresp, item_id:stmlist[i].item_id, block_id:blockid}});
	this.sl.type=current_type;
	this.segments.push(this.sl);
	last_type=current_type;
}

}

	this.preparation = {
      type: "html-keyboard-response",
      stimulus: "When you are ready, press any key to continue",
    };	
		
	this.fixation = {
      type: 'html-keyboard-response',
      stimulus: '<div style="font-size:60px;">+</div>',
      choices: jsPsych.NO_KEYS,
      trial_duration: function(){
        return jsPsych.randomization.sampleWithoutReplacement([550], 1)[0];
      },
      data: {test_part: 'fixation'},
	  post_trial_gap: 100,
    };

		function stmpresentation(segment) {
		var presentationtype="html-keyboard-response";
		if(segment.type=='text'){
		presentationtype="html-keyboard-response"	;
		}
		if(segment.type=='img'){
		presentationtype="image-keyboard-response";
		}
		if(segment.type=='aud'){
		presentationtype="audio-keyboard-response";
		}		
	
	   var aaa= {
      type: presentationtype,
      stimulus: jsPsych.timelineVariable('stimulus'),
 // Should give choices!!
 //     choices: ['f', 'j'],
      data: jsPsych.timelineVariable('data'),
	  post_trial_gap: 100,
      on_finish: function(data){
        data.correct = data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode(data.correct_response);
        var x=new trialresult();
		if(itemorder==1) 
		{
		ResText=x.name+x.response+x.c_response+x.time+x.block+x.trial+x.order;	
		}
		x.time=data.rt;
		x.response=jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(data.key_press);   //importnat: depending on the nature of the task, it can be changed to reflect "yes/no" 
		x.name=data.item_id;
		x.c_response=data.correct_response;  //importnat: depending on the nature of the task, it can be changed to reflect "yes/no" 
		x.block=data.block_id;
		x.order=itemorder;
		x.trial=trialorder;
		results.push(x);
		ResText+=x.name+","+x.response+","+x.c_response+","+x.time+","+x.block+","+x.trial+","+x.order+"<br>";			
		itemorder++; 
      	}
    };  return aaa;
	}
	
	function content(segment) {
		var bbb=stmpresentation(segment);
		var aaa={
      timeline: [bbb],   //important to add []!
      timeline_variables: segment,
      repetitions:1,
	randomize_order: false,};
	return aaa;
    }

		
// adjust accordingly 
	this.judgment1= {
      type: 'html-keyboard-response',
      stimulus: '<div style="font-size:30px;">Do you think this is a grammatical sentence?<br>If grammatical, press F; Otherwise, press J</div>',
      choices: ['f', 'j'],
      data: {test_part: 'judgment1', item_id:'judgment1', block_id: blockid },
	  post_trial_gap: 100,
	  on_finish: function(data){
//       data.correct = data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode(data.correct_response);  only use this for conditional setting
        var x=new trialresult();
		x.time=data.rt;
		x.response=jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(data.key_press);
		if (x.response=="f"){ x.response="Yes"} else if (x.response=="j"){x.response="No"};
		x.name=data.item_id;
		x.c_response=trialcrR;    // x.c_response: set as a parameter in top function 
		x.block=data.block_id;
		x.order="jd1";
		x.trial=trialorder;
		results.push(x);
		ResText+=x.name+","+x.response+","+x.c_response+","+x.time+","+x.block+","+x.trial+","+x.order+"<br>";		
//		trialorder++;
					}
		}
		//adjust accordingly
		this.judgment2= {
		type: 'html-button-response',
		stimulus:'A stimulus can be displayed here if necessary',
		choices: ['Yes', 'No'],
		prompt: "<p>Do you think this is a grammatical sentence?</p>",
		data: {test_part: 'judgment2', item_id:'judgment2', block_id: blockid },
		post_trial_gap: 100,
		on_finish: function(data){
        var x=new trialresult();
		x.time=data.rt; 
		x.response=(function(){if(data.button_pressed==0){return "Yes"} else if(data.button_pressed==1){return "No"}})();  // notice (function(){})() to execute immediately the function
		x.name=data.item_id;
		x.c_response=trialcrR;    // x.c_response: set as a parameter in top function 
		x.block=data.block_id;
		x.order="jd2";
		x.trial=trialorder;
		results.push(x);
		ResText+=x.name+","+x.response+","+x.c_response+","+x.time+","+x.block+","+x.trial+","+x.order+"<br>";		
		trialorder++;
		}
      };
	  
     this.allsegments=[this.preparation,this.fixation];
      for (i=0;i<this.segments.length;i++)
{
	var ddd=this.segments[i];	
	var ccc=content(ddd); 
	this.allsegments.push(ccc); 
}	
	this.allsegments.push(this.judgment1,this.judgment2);
	  
	  this.presentation={timeline: this.allsegments};
   
  };


	

 
 
 
 
 //var sentence1=new sentence();
 

 
    /* define welcome message trial */
    var welcome = {
      type: "html-keyboard-response",
      stimulus: wlcm,
    };


    /* define instructions trial */
    var instructions = {
      type: "html-keyboard-response",
      stimulus: "<p>In this experiment, a circle will appear in the center " +
          "of the screen.</p><p>If the circle is <strong>blue</strong>, " +
          "press the letter F on the keyboard as fast as you can.</p>" +
          "<p>If the circle is <strong>orange</strong>, press the letter J " +
          "as fast as you can.</p>" +
          "<div style='width: 700px;'>"+
          "<div style='float: left;'><img src='jspsych-6.0.2/examples/img/blue.png'></img>" +
          "<p class='small'><strong>Press the F key</strong></p></div>" +
          "<div class='float: right;'><img src='jspsych-6.0.2/examples/img/orange.png'></img>" +
          "<p class='small'><strong>Press the J key</strong></p></div>" +
          "</div>"+
          "<p>Press any key to begin.</p>",
      post_trial_gap: 500
    };

	var block_instr={   
		 timeline:[welcome, instructions],
			data:{block_id: "practice"},
	}

	timeline.push(block_instr);
    /* test trials */

	

   var block_practice={
 
		timeline: [sentence1.presentation],
	 }
   
	timeline.push(block_practice);


	
	
	
    /* define debrief */
    var debrief_block = {
      type: "html-keyboard-response",
      stimulus: function() {

        var trials = jsPsych.data.get().filter({test_part: 'test'});
        var correct_trials = trials.filter({correct: true});
        var accuracy = Math.round(correct_trials.count() / trials.count() * 100);
        var averagert = Math.round(correct_trials.select('rt').mean());

        return "<p>You responded correctly on "+accuracy+"% of the trials.</p>"+
        "<p>Your average response time was "+averagert+"ms.</p>"+
        "<p>Press any key to complete the experiment. Thank you!</p>";

      }
    };
    timeline.push(debrief_block);

    /* start the experiment */
    jsPsych.init({
      timeline: timeline,
	  
      on_finish: function() {
//		  datasave();
//		jsPsych.data.displayData();
		document.write(ResText);
      }
    });


		
	
function datasave(){
	
	ajaxrequest('test_post.php');
	
}
	
	
	
//================================================================================================Ajax手段传输数据
var subname=prompt("Please input your participant ID", "");
// create the XMLHttpRequest object, according browser
function get_XmlHttp() {
  // create the variable that will contain the instance of the XMLHttpRequest object (initially with null value)
  var xmlHttp = null;
  if(window.XMLHttpRequest) {		// for Forefox, IE7+, Opera, Safari, ...
    xmlHttp = new XMLHttpRequest();
  }
  else if(window.ActiveXObject) {	// for Internet Explorer 5 or 6
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  return xmlHttp;
}
// sends data to a php file, via POST
function ajaxrequest(php_file) {
  var request =  get_XmlHttp();		// call the function for the XMLHttpRequest instance
  // create pairs index=value with data that must be sent to server
  var  the_data = 'subname=V1_Test_'+subname+"\n"+ResText;  //change to V2 when necessary
  request.open("POST", php_file, true);			// set the request
  // adds  a header to tell the PHP script to recognize the data as is sent via POST
  request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  request.send(the_data);		// calls the send() method with datas as parameter
 // subname='subname='+subname ;
 // request.send(subname);
  // Check request status
  // If the response is received completely, will be transferred to the HTML tag with tagID
  request.onreadystatechange = function() {
    if (request.readyState == 4) {
//      document.write("<br><br><font size='6' face='Arial' color='green'>DATA SENT</font>");
	       document.write(ResText);
    }
  }
}


	
	
	
	